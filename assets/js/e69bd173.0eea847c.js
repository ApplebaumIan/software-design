"use strict";(self.webpackChunktu_cis_4398_docs_template=self.webpackChunktu_cis_4398_docs_template||[]).push([[8460],{59666:t=>{t.exports=JSON.parse('{"version":{"pluginId":"design-patterns","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docsSidebar":[{"type":"link","label":"Software Design Patterns in Javascript","href":"/design-patterns/intro","docId":"intro","unlisted":false},{"type":"category","label":"Creational Design Patterns","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Factory Pattern","href":"/design-patterns/creational-patterns/factory-pattern","docId":"creational-patterns/factory-pattern","unlisted":false}],"href":"/design-patterns/category/creational-design-patterns"}]},"docs":{"creational-patterns/factory-pattern":{"id":"creational-patterns/factory-pattern","title":"Factory Pattern","description":"Factory Method is a creational design pattern that provides an interface for creating objects in a superclass, but allows subclasses to alter the type of objects that will be created.","sidebar":"docsSidebar"},"intro":{"id":"intro","title":"Software Design Patterns in Javascript","description":"<Figure caption={\\"Intro to Design Patterns\\"} subcaption={","sidebar":"docsSidebar"}}}}')}}]);