"use strict";(self.webpackChunktu_cis_4398_docs_template=self.webpackChunktu_cis_4398_docs_template||[]).push([[1873],{46062:(e,n,t)=>{t.d(n,{A:()=>s});t(96540);var i=t(74848);function s(e){function n(){return n=e.id?e.id:(n=(n=(n=e.caption).replaceAll("."," ")).replaceAll(" ","-")).toLowerCase()}return(0,i.jsxs)("figure",{id:n(),align:e.align?e.align:"center",style:e.style?e.style:{},children:[e.children,e.src?(0,i.jsx)("img",{src:e.src,alt:e.alt}):(0,i.jsx)(i.Fragment,{}),(0,i.jsx)("figcaption",{align:e.align?e.align:"center",style:{fontWeight:"bold"},children:e.caption}),(0,i.jsx)("figcaption",{align:e.align?e.align:"center",style:{},children:e.subcaption})]})}},90988:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"creational-patterns/singleton","title":"Singleton Pattern","description":"Singleton is a creational design pattern that lets you ensure that a class has only one instance, while providing a global access point to this instance.","source":"@site/design-patterns/creational-patterns/singleton.mdx","sourceDirName":"creational-patterns","slug":"/creational-patterns/singleton","permalink":"/design-patterns/creational-patterns/singleton","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Singleton Pattern","sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"Creational Design Patterns","permalink":"/design-patterns/category/creational-design-patterns"},"next":{"title":"Factory Pattern","permalink":"/design-patterns/creational-patterns/factory-pattern"}}');var s=t(74848),a=t(28453),r=t(46062);const l={title:"Singleton Pattern",sidebar_position:1},o="Singleton Pattern",c={},d=[{value:"Slides",id:"slides",level:2},{value:"Step by Step Implementation",id:"step-by-step-implementation",level:2}];function p(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"singleton-pattern",children:"Singleton Pattern"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Singleton"})," is a creational design pattern that lets you ensure that a class has only one instance, while providing a global access point to this instance.\n",(0,s.jsx)(n.a,{href:"https://refactoring.guru/design-patterns/singleton",children:"~ Refactoring Guru"})]}),"\n"]}),"\n",(0,s.jsx)(r.A,{caption:"Singleton UML Class Diagram",children:(0,s.jsx)(n.mermaid,{value:'classDiagram\nclass Singleton {\n    - instance: Singleton$\n    - Singleton()\n    + getInstance() Singleton\n}\nSingleton --\x3e Singleton\nSingleton <-- Client\nnote for Singleton "if (instance == null) {<br/>// Note: if you\'re creating an app with<br/>// multithreading support, you should<br/>// place a thread lock here.<br/><div/>instance = new Singleton<br/><div/>return instance<br/>}"'})}),"\n",(0,s.jsx)(n.p,{children:"The Singleton design pattern ensures a class has only one instance and provides a global access point to that instance. It is useful for controlling access to shared resources and simplifying code. However, it can mask bad design and requires special treatment in multithreaded environments."}),"\n",(0,s.jsx)(n.h2,{id:"slides",children:"Slides"}),"\n",(0,s.jsx)(r.A,{caption:"Singleton Pattern",subcaption:(0,s.jsx)(n.a,{href:"/slides-html/Singleton/#0",target:"_blank",rel:"noopener noreferrer",children:"full screen click here"}),children:(0,s.jsx)("iframe",{height:"500",width:"100%",src:"/slides-html/Singleton/#0",title:"W3Schools Free Online Web Tutorials"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"step-by-step-implementation",children:"Step by Step Implementation"}),"\n",(0,s.jsxs)(n.p,{children:["In this tutorial, we\u2019ll build a ",(0,s.jsx)(n.strong,{children:"Singleton Pattern"})," in JavaScript to fetch data from a real API (",(0,s.jsx)(n.a,{href:"https://courses.ianapplebaum.com/public/docs/",children:"https://courses.ianapplebaum.com/api"}),"). The Singleton Pattern ensures only one instance of ",(0,s.jsx)(n.code,{children:"ApiService"})," is created, centralizing access to authenticated API calls."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"API Key: gYsK1cbEr2xpdLPOIx8q8IuuMzgEITDPTFpWaSn4"})}),"\n",(0,s.jsx)("table",{children:(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("div",{className:"",children:(0,s.jsx)("iframe",{height:"651px",width:"294px",src:"/slides-html/Singleton-Implementation/#0",title:"W3Schools Free Online Web Tutorials"})})}),(0,s.jsx)("td",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",metastring:"live",live:!0,children:'function SingletonDemo() {\n    class ApiService {\n        // Private static field for storing the singleton instance\n        static #instance;\n\n        async fetchUser() {\n        return "Fetching user data...";\n    }\n}\n\nconst [data, setData] = useState(null);\n\n// Simulate fetching data\nuseEffect(() => {\n    const apiService = new ApiService();\n    apiService.fetchUser().then(result => setData(result));\n}, []);\n\nreturn <div>{data}</div>;\n}\n\n'})})})]})})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var i=t(96540);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);