"use strict";(self.webpackChunktu_cis_4398_docs_template=self.webpackChunktu_cis_4398_docs_template||[]).push([[8460],{59666:t=>{t.exports=JSON.parse('{"version":{"pluginId":"design-patterns","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docsSidebar":[{"type":"link","label":"Software Design Patterns in Javascript","href":"/design-patterns/intro","docId":"intro","unlisted":false},{"type":"category","label":"Creational Design Patterns","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Singleton Pattern","href":"/design-patterns/creational-patterns/singleton","docId":"creational-patterns/singleton","unlisted":false},{"type":"link","label":"Factory Pattern","href":"/design-patterns/creational-patterns/factory-pattern","docId":"creational-patterns/factory-pattern","unlisted":false}],"href":"/design-patterns/category/creational-design-patterns"},{"type":"category","label":"Behavioral Design Patterns","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Strategy Pattern","href":"/design-patterns/behavioral-patterns/strategy","docId":"behavioral-patterns/strategy","unlisted":false}],"href":"/design-patterns/category/behavioral-design-patterns"},{"type":"category","label":"Structural Design Patterns","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Adapter Pattern","href":"/design-patterns/structural-patterns/adapter","docId":"structural-patterns/adapter","unlisted":false},{"type":"link","label":"Fa\xe7ade Pattern","href":"/design-patterns/structural-patterns/facade","docId":"structural-patterns/facade","unlisted":false}],"href":"/design-patterns/category/structural-design-patterns"}]},"docs":{"behavioral-patterns/strategy":{"id":"behavioral-patterns/strategy","title":"Strategy Pattern","description":"Strategy is a behavioral design pattern that lets you define a family of algorithms, put each of them into a separate class, and make their objects interchangeable.","sidebar":"docsSidebar"},"creational-patterns/factory-pattern":{"id":"creational-patterns/factory-pattern","title":"Factory Pattern","description":"Factory Method is a creational design pattern that provides an interface for creating objects in a superclass, but allows subclasses to alter the type of objects that will be created.","sidebar":"docsSidebar"},"creational-patterns/singleton":{"id":"creational-patterns/singleton","title":"Singleton Pattern","description":"Singleton is a creational design pattern that lets you ensure that a class has only one instance, while providing a global access point to this instance.","sidebar":"docsSidebar"},"intro":{"id":"intro","title":"Software Design Patterns in Javascript","description":"<Figure caption={\\"Intro to Design Patterns\\"} subcaption={","sidebar":"docsSidebar"},"structural-patterns/adapter":{"id":"structural-patterns/adapter","title":"Adapter Pattern","description":"Adapter is a structural design pattern that allows objects with incompatible interfaces to collaborate.","sidebar":"docsSidebar"},"structural-patterns/facade":{"id":"structural-patterns/facade","title":"Fa\xe7ade Pattern","description":"Fa\xe7ade is a structural design pattern that provides a simplified interface to a library, a framework, or any other complex set of classes.","sidebar":"docsSidebar"}}}}')}}]);